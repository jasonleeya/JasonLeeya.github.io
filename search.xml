<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[前端面试题汇总]]></title>
    <url>%2F2019%2F06%2F13%2F%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[前言马上就要参与到2019届毕业生的就业竞争中了，了解到前端面试很考验对前端基础知识的掌握，所以在网上搜罗了很多面试题，在此做个汇总。 基础问题讲讲输入完网址按下回车，到看到网页这个过程中发生了什么 域名解析 发起TCP的3次握手 建立TCP连接后发起http请求 服务器端响应http请求，浏览器得到html代码 浏览器解析html代码，并请求html代码中的资源 浏览器对页面进行渲染呈现给用户 谈谈你对前端性能优化的理解 请求数量：合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域 请求带宽：开启GZip，精简JavaScript，移除重复脚本，图像优化，将icon做成字体 缓存利用：使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存 页面结构：将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出 代码校验：避免CSS表达式，避免重定向 请简述盒模型文档中的每个元素被描绘为矩形盒子。盒子有四个边界：外边距边界margin, 边框边界border, 内边距边界padding与内容边界content。 请你谈谈Cookie的弊端 每个特定的域名下最多生成的cookie个数有限制 IE和Opera 会清理近期最少使用的cookie，Firefox会随机清理cookie cookie的最大大约为4096字节，为了兼容性，一般不能超过4095字节 安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。 浏览器本地存储在HTML5中提供了sessionStorage和localStorage。 sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁，是会话级别的存储。 localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。 web storage和cookie的区别 Cookie的大小是受限的 每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽 cookie还需要指定作用域，不可以跨域调用 Web Storage拥有setItem,getItem等方法，cookie需要前端开发者自己封装setCookie，getCookie Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生 IE7、IE6中的UserData通过简单的代码封装可以统一到所有的浏览器都支持web storage 对BFC规范的理解BFC全称是Block Formatting Context，即块格式化上下文。它是CSS2.1规范定义的，关于CSS渲染定位的一个概念。 BFC是页面CSS 视觉渲染的一部分，用于决定块盒子的布局及浮动相互影响范围的一个区域。 BFC的一个最重要的效果是，让处于BFC内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。 利用BFC可以闭合浮动，防止与浮动元素重叠。 线程与进程的区别 一个程序至少有一个进程，一个进程至少有一个线程 线程的划分尺度小于进程，使得多线程程序的并发性高 进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率 每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制 多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配 请说出三种减少页面加载时间的方法 尽量减少页面中重复的HTTP请求数量 服务器开启gzip压缩 css样式的定义放置在文件头部 Javascript脚本放在文件末尾 压缩合并Javascript、CSS代码 使用多域名负载网页内的多个文件、图片 你都使用哪些工具来测试代码的性能？开放题FireBug， JSPerf，Profiler（都没用过，直接F12…） 你遇到过比较难的技术问题是？你是如何解决的？开放题遇到的各种自己不会的新技术—到官网上找文档仔细阅读，写一个练习的demo边看文档边练习，遇到问题先遇到文档上解决不了的问题就上google问题，访问相关技术论坛，或者问询问懂的同事 跨域问题—设置代理 浏览器或者移动设备兼容和适配问题—查阅相关资料了解问题根源，再对不同设备编写相应代码、 内存溢出—通过不同手段找到内存溢出的问题所在做出相应调整 你常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？JQuery、Bootstarp、Vue、React、Node.js、axios… WebStorm、Sublime Text 、谷歌浏览器 轮播图插件、三级联动插件、标签栏插件、侧边栏导航插件 列举IE与其他浏览器不一样的特性？ IE的排版引擎是Trident （又称为MSHTML） Trident内核曾经几乎与W3C标准脱节（2005年） Trident内核的大量 Bug等安全性问题没有得到及时解决 JS方面，有很多独立的方法，例如绑定事件的attachEvent、创建事件的createEventObject等 CSS方面，也有自己独有的处理方式，例如设置透明，低版本IE中使用滤镜的方式 什么叫优雅降级和渐进增强？渐进增强 progressive enhancement： 针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。 优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。 区别： a. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给 b. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要 c. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带 对前端界面工程师这个职位是怎么样理解的？ 前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好 参与项目，快速高质量完成实现效果图，精确到1px； 与团队成员，UI设计，产品经理的沟通； 做好的页面结构，页面重构和用户体验； 处理hack，兼容、写出优美的代码格式； 针对服务器的优化、拥抱最新前端技术。 你在现在的团队处于什么样的角色，起到了什么明显的作用？开放题与客户沟通了解客户需求，及时了解客户对项目的意见作出改变，与后端程序员和美工保持沟通时刻了解整体项目进度；对项目完成的速度会有很大影响。 你的优点是什么？缺点是什么？开放题优点：肯钻研、肯吃苦（不介意加班）、对工作很负责、喜欢学习新东西、善于和别人沟通、团队意识强。 缺点：有时候会对自己太严格，导致浪费很多不必要的时间和精力，我会在以后的工作中尽量克制自己，做到适可为止。 如何管理前端团队?开放题做到分工合理，了解团队中每个人的优缺点擅长和不擅长之处，做到对待每个人人人平等，提高团队的兴致，做好团队的榜样，带动每一个人参与合作。 最近在学什么？能谈谈你未来3，5年给自己的规划吗？开放题最近在学习React、TypeScript等前端前沿技术、未来3、5年内自己要不断学习新技术，提升自己的技术能力，争取成为一名优秀中高级前端工程师。 平时如何管理你的项目？ 先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等； 编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）； 标注样式编写人，各模块都及时标注（标注关键样式调用的地方）； 页面进行标注（例如 页面 模块 开始和结束）； CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）； JS 分文件夹存放 命名以该JS功能为准的英文翻译。 图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理 说说最近最流行的一些东西吧？常去哪些网站？MVVM框架：Vue、React、Anguler，Node.js，MongoDB… Google、GitHub、MDN、iconfont、CSDN、stackoverflow、SegmentFault… 请解释一下 JavaScript 的同源策略同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议。 指一段脚本只能读取来自同一来源的窗口和文档的属性。 网站重构的理解重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。 a. 使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的) b. 对于移动平台的优化，针对于SEO进行优化 c. 减少代码间的耦合，让代码保持弹性 d. 压缩或合并JS、CSS、image等前端资源 前端页面有哪三层构成，分别是什么？作用是什么？ 结构层：由 HTML 或 XHTML 之类的标记语言负责创建，仅负责语义的表达。解决了页面“内容是什么”的问题。 表示层：由CSS负责创建，解决了页面“如何显示内容”的问题。 行为层：由脚本负责。解决了页面上“内容应该如何对事件作出反应”的问题。 知道的网页制作会用到的图片格式有哪些？png-8，png-24，jpeg，gif，svg Webp：谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。 Apng：全称是“Animated Portable Network Graphics”, 是PNG的位图动画扩展，可以实现png格式的动态图片效果。04年诞生，但一直得不到各大浏览器厂商的支持，直到日前得到 iOS safari 8的支持，有望代替GIF成为下一代动态图标准。 一次js请求一般情况下有哪些地方会有缓存处理？ 浏览器端存储 浏览器端文件缓存 HTTP缓存304 服务器端文件类型缓存 表现层&amp;DOM缓存 一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验[性能优化]。 图片懒加载，滚动到相应位置才加载图片。 图片预加载，如果为幻灯片、相册等，将当前展示图片的前一张和后一张优先下载。 使用CSSsprite，SVGsprite，Iconfont、Base64等技术，如果图片为css图片的话。 如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。 谈谈以前端角度出发做好SEO需要考虑什么？ 了解搜索引擎如何抓取网页和如何索引网页 meta标签优化 关键词分析 付费给搜索引擎 链接交换和链接广泛度（Link Popularity） 合理的标签使用 记不住的读不懂的尚未学习知识的问题WEB应用从服务器主动推送Data到客户端有那些方式？ html5 websoket WebSocket 通过 Flash XHR长时间连接 XHR Multipart Streaming 不可见的Iframe 标签的长时间连接(可跨域) AMD和CMD 规范的区别？AMD 提前执行依赖 - 尽早执行，requireJS 是它的实现 CMD 按需执行依赖 - 懒执行，seaJS 是它的实现 浏览器的内核分别是什么?IE浏览器的内核Trident； Mozilla的Gecko； Chrome的Blink（WebKit的分支）； Opera内核原为Presto，现为Blink； 请介绍下cache-control每个资源都可以通过 Cache-Control HTTP 头来定义自己的缓存策略 Cache-Control 指令控制谁在什么条件下可以缓存响应以及可以缓存多久 Cache-Control 头在 HTTP/1.1 规范中定义，取代了之前用来定义响应缓存策略的头（例如 Expires）。]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>知识点</tag>
        <tag>前端基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React基础课程学习]]></title>
    <url>%2F2019%2F06%2F04%2FReact%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[React基础课程学习raect]]></content>
      <categories>
        <category>学习历程</category>
      </categories>
      <tags>
        <tag>自学</tag>
        <tag>前端</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识MarkDown]]></title>
    <url>%2F2019%2F06%2F04%2F%E5%88%9D%E8%AF%86MarkDown%2F</url>
    <content type="text"><![CDATA[前言Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Hexo可以通过MarkDown的.md文件生成文章，所以学习MarkDown语法是很有必要的。 编辑器推荐在此推荐一款灰常好用的MarkDown编辑器—Typora,此编辑器可以在编写MarkDown语句时实时将效果展示在编辑器中，较传统MarkDown编辑器更加方便。 语法标题设置标题的做法是在想要设置成标题的文字前加#，#是一级标题，##是二级标题，以此类推，最小是六级标题。 注：#和文字中间要加空格。 示例： 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 效果如下： 字体字体用法及效果如下： **加粗** =&gt; 加粗 *斜体* =&gt; 斜体 ***斜体加粗*** =&gt; 斜体加粗 ~~删除线~~ =&gt; 删除线 引用在引用的文字前加&gt;即可: 123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;这是引用的内容 效果如下： 这是引用的内容 这是引用的内容 这是引用的内容 分割线三个或者三个以上的 -或者 *都可以。 1234-------******** 效果如下： 图片1![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;) 图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 示例： 超链接1[超链接名](超链接地址 &quot;超链接title&quot;) title可加可不加 示例： 李双江的博客 列表无序列表语法：无序列表用- + * 任何一种都可以 12345- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格 效果如下： 列表内容 列表内容 列表内容 有序列表语法：数字加点 123451.列表内容2.列表内容3.列表内容注意：序号跟内容之间要有空格 效果如下： 列表内容 列表内容 列表内容 列表内容 列表嵌套上一级和下一级之间敲三个空格即可 一级无序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级无序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 一级有序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级有序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 表格表格 语法： 1234567891011表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 示例： 12345姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟 效果如下： 姓名 技能 排行 刘备 哭 大哥 关羽 打 二哥 张飞 骂 三弟 代码语法： 单行代码：代码之间分别用一个反引号包起来 1`代码内容` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 12345(```) 代码... 代码... 代码...(```) 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。 示例： 单行代码 1`create database hero;` 代码块 123456(```) function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;; &#125; fun();(```) 效果如下： 单行代码 1create database hero; 代码块 1234function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;;&#125;fun(); 流程图1234567st=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 效果如下： 由于Hexo不支持流程图，所以我放上截图： 本文参考至简书作者高鸿祥-Markdown基本语法]]></content>
      <categories>
        <category>学习历程</category>
      </categories>
      <tags>
        <tag>自学</tag>
        <tag>MarkDown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo主题NexT的配置]]></title>
    <url>%2F2019%2F06%2F01%2FHexo%E4%B8%BB%E9%A2%98NexT%E7%9A%84%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言个人认为Hexo提供的默认主题实在是太丑了，好在Hexo官方提供了很多主题可以选择https://hexo.io/themes经过细心挑选，我选择了NexT主题，NexT主题页面简洁优美，功能齐全，文档丰富，下面我将对NexT进行配置。 安装主题安装NexT只需要在博客更目录打开命令行输入： 1git clone https://github.com/theme-next/hexo-theme-next themes/next 启用NexT主题打开站点配置文件：hexo/_config.yml找到theme更改如下： 1theme: next hexo s启动本地服务器控制台输出： 1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 这是打开浏览器访问：http://localhost:4000，这是可以发现Hexo默认主题已经变为NexT主题。 NexT配置选择方案NexT支持四种不同风格的布局方案： Muse→默认方案，这是NexT的初始版本。使用黑白色调，主要看起来干净。 Mist →更紧凑的Muse版本，单列视图整齐。 Pisces→双栏计划，像你邻居的女儿一样新鲜。 Gemini→看起来像双鱼座，但有不同的带阴影的列块对视图更敏感。 这里我选择了Gemini,next/_config.yml搜索关键词schema配置如下： 1234#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 语言选择NexT主题文字默认是英文的，hexo/config.yml搜索关键词language配置如下： 1language: zh-CN 菜单设置设置导航栏的菜单选项，next/_config.yml搜索关键词menu，菜单item格式为Key: /link/ || icon key为菜单标题，link为路由链接，icon为菜单图标，可以在Font Awesome官网找到合适的图标名称并填入。 这里为将菜单栏设置如下： 1234home: / || hometags: /tags/ || tagscategories: /categories/ || tharchives: /archives/ || archive 如需自定义菜单和页面，可以参考官网文档自定义页面。 头像设置在主题目录下source/images/存放你的头像文件，并在next/_config.yml配置avatar 1avatar: /images/avatar.png。 设置标签分类页面在菜单栏里我们已经设置了分类和标签两个item,但是点进去却是Cannot GET /tags/这是因为我们还没有这两个页面，用： 1hexo new page &apos;name&apos; //name为创建的页面名称 分别创建tags、categories页面，这是我们可以看到source目录下已经多出了tags、categories两个文件夹。将这两个文件夹下index.md文件修改如下： 12345---title: tagsdate: 2018-01-04 11:45:41type: tags--- 每次新怎文章时增加上tags和categories属性值，就能在标签和分类页面有所展示了。 第三方插件静态网站在某些功能上受到限制，但我们可以通过第三方服务来扩展我们的网站。 添加fork me on github在http://tholman.com/github-corners选择合适的样式并复制代码到themes/next/layout/_layout.swig 添加到&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下面。 文章评论系统官网文档评论插件提供了多种添加插件的方法，但大部分被墙不能使用，而国内的插件只有Valine不收费，所以我选择了Valine。Valine配置如下： 创建一个Valine账号并登陆，点击创建应用： 点击设置&gt;应用Key获取App ID和AppKey： 在next/_config.yml中配置如下： 1234567891011valine: enable: true appid: # 你的App ID appkey: # 你的App Key notify: false verify: false placeholder: Just go go avatar: mm guest_info: nick,mail,link pageSize: 10 visitor: false hexo s打开本地服务器并访问文章页面，在文尾多出了评论组建。 动态背景cd到next文件夹输入： 1git clone https://github.com/theme-next/theme-next-three source/lib/three next/_config.yml配置： 12vendors: canvas_ribbon: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-ribbon@1/canvas-ribbon.js hexo/_config.yml配置： 12# canvas_linescanvas_lines: false hexo s打开本地服务器访问网站会发现背景有动态线条。 开启搜索功能cd博客根目录安装hexo-generator-searchdb： 1npm install hexo-generator-searchdb --save hexo/_config.yml配置： 12345search: path: search.xml field: post format: html limit: 10000 next/_config.yml配置： 12345local_search: enable: true trigger: auto top_n_per_article: 1 unescape: false 重启服务器会发现侧边导航栏会出现搜索选项。 添加一键分享功能next/_config.yml配置： 12baidushare: type: button 添加背景音乐下载Aplayer源码并解压至themes\next\source文件夹下。 新建themes\next\source\dist\music.js文件，添加内容： 1234567891011121314151617const ap = new APlayer(&#123; container: document.getElementById(&apos;aplayer&apos;), fixed: true, autoplay: false, audio: [ &#123; name: &quot;Es ware schon gewesen&quot;, artist: &apos;Ulli Bögershausen&apos;, url: &apos;http://music.163.com/song/media/outer/url?id=2065349.mp3&apos;, cover: &apos;http://p1.music.126.net/GrBJUAYcfgwbaZywULYwMA==/931286348781408.jpg&apos;, &#125;,&#123; name: &quot;So Cute~&quot;, artist: &apos;Lopu$&apos;, url: &apos;http://music.163.com/song/media/outer/url?id=433107530.mp3&apos;, cover: &apos;http://p1.music.126.net/yFCpD3GrgmcInAbVvVaFUg==/17999005346907556.jpg&apos;, &#125;]&#125;); audio:[]是音乐列表，复制一个音乐对象，浏览器打开并登陆网易云音乐，找到想要添加的歌曲，地址栏复制id值，在音乐对象的url中替换其中的id值，回到浏览器右键歌曲封面图片复制地址，替换音乐对象的cover，一首歌曲便添加成功了。 打开themes\next\layout\_layout.swig文件，将 1234&lt;link rel=&quot;stylesheet&quot; href=&quot;/dist/APlayer.min.css&quot;&gt;&lt;div id=&quot;aplayer&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/dist/music.js&quot;&gt;&lt;/script&gt; 添加到&lt;body itemscope ...&gt;后面就行，即在&lt;body&gt;&lt;/body&gt;里面。 重新生成，访问页面，就能看到左下角的音乐播放器了。 以上便是我的博客NexT主题的配置，详细配置见NexT官网。]]></content>
      <categories>
        <category>技术贴</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github Pages+Hexo搭建博客]]></title>
    <url>%2F2019%2F05%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[前言一直有自己搭建个人博客的想法，但工作在身一直没有时间折腾，偶然发现GitHub有个牛比的功能——GitHub Page，可以将静态博客页面托管到上面，而且通过Hexo框架可以快速生成博客网站，并通过MarkDown 生成文章。 建立博客步骤 安装Git 安装Node.Js 安装Hexo 创建GitHub仓库 生成SSH并添加到GitHub 将Hexo博客部署到GitHub 设置域名 发布文章 安装GitGit是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。我们通过它来对博客进行版本控制以及与GitHub进行连接，我们通过Git官网下载Git并安装。功能非常强大，有兴趣可以了解廖雪峰老师的Git教程。 安装Node.jsNode 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。Hexo是用Node.js编写的，所以需要安装Node.js以及Node.js的包管理工具NPM。 安装Hexo安装好Git与Node.js后，创建文件夹blog,进入blog文件夹（你也可以直接在桌面）按住shift+鼠标右键，右键菜单找到在此处打开CMD窗口,你也可以直接win+r输入cmd再cd到blog文件夹，执行命令： 1npm install -g hexo-cli 等安装完后用hexo v查看hexo版本确定是否安装成功 接下来初始化hexo: 1hexo init myblog //这个顺便取什么名字都行 然后安装依赖包： 1npm install 安装完后blog会多出很多文件夹以及文件： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章以及资源 themes：主题 _config.yml: 博客的配置文件 执行： 12hexo g //generatehexo s //serve 打开服务器，并打开浏览器输入localhost:4000，就可以看到你创建的博客网站了。 命令行ctrl+c关掉服务器 创建GitHub仓库首先你得有个github账号，如果没得就去注册一个吧 注册完后在你的首页可以看到New repository，点击新建仓库 创建一个和你用户名相同（不一样域名会很长）的仓库，后面加上github.io（只有这样github才能将此仓库识别为GitHub Page仓库）。然后具体的git操作我将不再赘述，具体详见廖雪峰老师的Git教程。 生成SSH并添加到GitHub在你博客文件夹右键Git Bash Here,执行： 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 这里的yourname为你的Github用户名，youremail为你的Github绑定邮箱。 一路回车直到显示： 1ssh-keygen -t rsa -C &quot;youremail&quot; 输入你的邮箱并回车创建SSH,创建完成后会提示生成的.ssh文件的未知，找到这个文件夹,id_rsa为私钥，保存于电脑，不能将此分享给别人，id_rsa_pub为公钥，将此放到Github上，Github通过此与你电脑里的私钥进行匹配，只有匹配成功后才能git与你电脑进行文件传输。 进去Github，点击头像找到setting,找到侧边栏的SSH and GPG keys,点击New SSH key,输入窗口title可以随便填，将公钥内容填入key中。 gitbash执行： 1ssh -T git@github.com 查看公钥是否添加成功。 将hexo部署到github打开myblog文件夹下的配置文件 _config.yml，在文件最下面添加： 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master repo为你的博客仓库地址。 打开命令行，cd到不可目录，安装deploy-git，这样才能用命令行将不可部署到Github 1npm install hexo-deployer-git --save 然后依次执行 123hexo cleanhexo generatehexo deploy hexo clean清除缓存，简写为hexo c可省略。hexo generate 生成静态文章，简写为hexo ghexo deploy 部署文章，简写为hexo d 待部署完成后你就可以到http://yourname.github.io查看的博客了。 域名设置你或许觉得github提供的域名太长，BIG不高，亦或许你有更好的域名，那没关系，GitHub Page可以实现自定义域名。 在阿里云或者腾讯云购买一个域名，具体怎么购买自行查阅相关资料，打开域名控制台，点击域名后面的解析添加解析，最好选CNAME解析，解析到你的项目地址。 进入Github中你的博客仓库点击setting,找到Custom domain，设置你的域名。 进入你的博客文件夹创建一个名为CNAME的文件，不要后缀，打开CNAME,写入你的域名（没有设置这个文件hexo的每次 deploy都将清除Github上你的Custom domain，每次都要重新进行设置） 这样，你就可以通过你自定义的域名进入你的博客了。 发布文章博客根目录下gitbash输入 1hexo new newpapername //newpapername为博客名 会在source/_post中生成新的博客，写完博客后 123hexo cleanhexo ghexo d 你就可以在你的博客下看到你新怎的博客了。]]></content>
      <categories>
        <category>技术贴</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>域名</tag>
      </tags>
  </entry>
</search>
